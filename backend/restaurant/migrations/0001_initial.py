# Generated by Django 3.1.6 on 2021-03-27 20:23

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('base', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_address', models.CharField(max_length=100)),
                ('apartment_address', models.CharField(max_length=100)),
                ('zip', models.CharField(max_length=100)),
                ('address_type', models.CharField(choices=[('BILLING', 'Billing'), ('SHIPPING', 'Shipping')], max_length=50)),
                ('default', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Addresses',
            },
        ),
        migrations.CreateModel(
            name='ApplicationSetting',
            fields=[
                ('baseentity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.baseentity')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='application/% Y/% m/% d/')),
                ('favicon', models.ImageField(blank=True, null=True, upload_to='application/% Y/% m/% d/')),
                ('site_name', models.CharField(default='My site', max_length=100)),
            ],
            bases=('base.baseentity',),
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=15)),
                ('amount', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('baseentity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.baseentity')),
                ('title', models.CharField(max_length=120)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('description', models.TextField()),
                ('feature', models.CharField(blank=True, max_length=180, null=True)),
                ('price', models.IntegerField(default=0)),
                ('discount_price', models.FloatField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='inventory_avatar')),
            ],
            bases=('base.baseentity',),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('baseentity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.baseentity')),
                ('name', models.CharField(max_length=120)),
                ('is_active', models.BooleanField(default=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='location')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child', to='restaurant.location')),
            ],
            bases=('base.baseentity',),
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('baseentity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.baseentity')),
                ('name', models.CharField(max_length=120)),
                ('sub_domain', models.CharField(blank=True, max_length=180, null=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='restaurant_avatar')),
                ('owner', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='restaurant', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('base.baseentity',),
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amar_pay_charge_id', models.CharField(max_length=50)),
                ('amount', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Outlet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('address', models.CharField(max_length=300)),
                ('area', models.CharField(max_length=120)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='outlet_avatar')),
                ('phone', models.IntegerField()),
                ('email', models.EmailField(max_length=254)),
                ('is_publish', models.BooleanField(default=False)),
                ('is_shared', models.BooleanField(default=False)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='restaurant_outlet', to='restaurant.restaurant')),
            ],
        ),
        migrations.CreateModel(
            name='OrderPickUp',
            fields=[
                ('baseentity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.baseentity')),
                ('is_open', models.BooleanField(default=False)),
                ('payment_method', models.CharField(choices=[('CARD', 'Card'), ('CASH', 'Cash')], default='CASH', max_length=20)),
                ('preparation', models.IntegerField(default=0)),
                ('outlet', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='order_pickup', to='restaurant.outlet')),
            ],
            bases=('base.baseentity',),
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('baseentity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.baseentity')),
                ('quantity', models.IntegerField(default=1)),
                ('ordered', models.BooleanField(default=False)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_item', to='restaurant.inventory')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_item', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('base.baseentity',),
        ),
        migrations.CreateModel(
            name='OrderDelivery',
            fields=[
                ('baseentity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.baseentity')),
                ('is_open', models.BooleanField(default=False)),
                ('payment_method', models.CharField(choices=[('CARD', 'Card'), ('CASH', 'Cash')], default='CASH', max_length=20)),
                ('preparation', models.IntegerField(default=0)),
                ('preparation_delivery', models.IntegerField(default=0)),
                ('delivery_free', models.IntegerField(default=0)),
                ('min_order_value', models.IntegerField(default=0)),
                ('area_file', models.FileField(blank=True, null=True, upload_to='delivery_area')),
                ('outlet', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_delivery', to='restaurant.outlet')),
            ],
            bases=('base.baseentity',),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_code', models.CharField(blank=True, max_length=20, null=True)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('ordered_date', models.DateTimeField()),
                ('ordered', models.BooleanField(default=False)),
                ('being_delivered', models.BooleanField(default=False)),
                ('received', models.BooleanField(default=False)),
                ('status', models.IntegerField(choices=[(0, 'ALL'), (1, 'NEW'), (2, 'KITCHEN'), (3, 'READY')], default=0)),
                ('order_date', models.DateField(auto_now_add=True)),
                ('order_time', models.TimeField(auto_now_add=True)),
                ('billing_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='billing_address', to='restaurant.address')),
                ('coupon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='restaurant.coupon')),
                ('items', models.ManyToManyField(related_name='order', to='restaurant.OrderItem')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order', to='restaurant.location')),
                ('outlet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_outlet', to='restaurant.outlet')),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='restaurant.payment')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order', to='restaurant.restaurant')),
                ('shipping_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shipping_address', to='restaurant.address')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='inventory',
            name='outlet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outlet_inventory', to='restaurant.outlet'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child', to='restaurant.inventory'),
        ),
        migrations.CreateModel(
            name='Day',
            fields=[
                ('baseentity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.baseentity')),
                ('name', models.CharField(max_length=100)),
                ('is_open', models.BooleanField(default=True)),
                ('start_time', models.TimeField(default=datetime.time(11, 0))),
                ('end_time', models.TimeField(default=datetime.time(23, 0))),
                ('order_delivery', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='opening_hours', to='restaurant.orderdelivery')),
                ('order_pickup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_pickups', to='restaurant.orderpickup')),
            ],
            bases=('base.baseentity',),
        ),
    ]
